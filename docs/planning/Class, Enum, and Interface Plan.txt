Edit: This doc is very outdated. Please refer to project/docs/FIT2099_Assignment_1_-_Design_Rationale.pdf for updated info on design
General List of Classes, Enums and Interfaces:
Classes:
	Req 1: Trees
		Tree extends Ground
		Coin extends Item

	Req 2: Jump ability
		Player extends Actor

	Req 3: Enemies
		Enemy(abstract) extends Actor
		Goomba extends Enemy
		Koopa extends Enemy

	Req 4: Magic Items
		MagicItem(abstract) extends Ground
		SuperMushroom extends MagicItem
		PowerStar extends MagicItem

	Req 5: Trading
		Toad extends Actor

	Req 6: Monologue
		Probably no actual classes needed for this, just implement text feedback for speech/actions using println (from the Display class in the game engine, not the System.out one)

	Req 7: Reset game
		Once again, no new classes needed, but just implement methods in already existing classes that allow this to be implemented.


Explanation of parts of the UML diagram:
	Enemies Explanation:
		The abstract enemy class has a map of behaviours. There are currently 3 behaviours implemented, Wander, Attack and Follow.
		The abstract enemy class exists so that if we need to add more enemies in the future, it will be relatively easy.
		The Goomba and Koopa classes extend the Enemy class.
		Since enemies cannot move through 'Floor', there is a dependency from Enemy to Floor, so that if the surroundings of the Enemy are Floor objects, the Enemy does not see that as a valid move.
		GampMap is the class that manages all actors
		The Wrench class extends Item.

	Tree Explanation:
		The Tree class extends Ground
		The Tree has a dependency on Goomba and Koopa directly (not the enemy class) since it needs to instantiate the Goombas (sprout) and Koopa (mature)
		The Tree has a dependency on Dirt since it has the chance to wither and die and turn to dirt

	Player Explanation:
		Player depends on Tree and Wall due to the %chances of failure to jump walls/trees

	Trading Explanation:
		Toad extends Actor
		Toad will handle all of the trading logic, so depends on Player to see the player's money
		Toad depends on Wrench and MagicalItem since Toad sells those




Enums:
	TreeType (implements the 3 stages of tree lifetime, sprout(+), sapling (t), Mature (T))

Interfaces:
	Jumpable (implemented by stuff like Walls, Trees, etc that can be jumped over/onto)



##########################
the following is super rough notes I made while trying to make sense of / connect all the classes together, some methods may be outdated/unnecessary

Detailed Desc of Each Interface:
	Jumpable:
		The implementing class will override the getFallDamage method

		Methods:
			int getFallDamage() - returns 0 if the jump was successful, otherwise returns the repsective amount of fall damage


##########################


Detailed Desc of Each class:
	Tree: extends Ground implements Jumpable
		Attributes:
			enum TreeType type - enum describing the state of the tree's growth
			int turnsUntilGrowth - the number of game rounds until the tree grows
			int turnsUntilSprout - if the tree is Mature(T), represents the number of turns until a new sprout is spawned adjacent to the tree
			static final int maxTreeCount - the maximum number of trees allowed on the map
			static int treeCount - the current number of trees on the map

		Methods:
			Tree() - constructor that intialises the state to sprout(+), and increments the treeCount
			void grow() - advances the tree one state of growth
			void update() - is run once every round, performs menial tasks such as the % chance to spawn enemies/coins, decrements turnsUntilGrowth, calls grow if necessary, decrements
			void spawnAdjacentTree() - spawns a sprout if there is fertile dirt near the tree
			int getFallDamage() - overrides for the Jumpable interface, returns 0 if the jump was successful, otherwise returns the repsective amount of fall damage
			void spawnDrop() - spawns an enemy on the tree (goomba if sprout(10%), coin if sapling(10%), and koopa if Mature(15%))
			void die() - decrements the treeCount and turns the tree into dirt


	Coin: extends Item
		Attributes:
			final static int value = 20 - represents the amount of money gained from picking up the coin
		Methods:
			Coin() - constructor that sets the display character to '$'
			int getValue() - returns the value of the coin


	Player: extends Actor
		Attributes:

		Methods:
			void jump() - tries to jump to a given direction, if successful, the player moves, if unsuccesful, the player loses health and does not move, prints messages to te console (using println from the Display class)


## enemy class that goomba and koopa will extend, also makes it easier for if there needed to be another enemy added in the future
	Enemy: extends Actor
		Attributes:
			Map<int, Behaviour> behaviours - map of behaviours that the enemy can have (incl wander, attack, follow)


	Goomba: extends Enemy
		Attributes:

		Methods:
			Goomba() - constructor that initialises health to 20
			void update() - called once per round, calls Enemy move method, Also 10% chance to suicide


	Koopa: extends Enemy
		Attributes:
			boolean dormant - initialised to be false, but once HP == 0, will turn true
		Methods:
			Koopa() - constructor tha initialises health to 100, and dormant to false
			void update() - called once per round, calls Enemy move method if dormant is false
			void goDormant() - called if the Koopa loses all it's health, turns into a shell(change display character to 'D') and does nothing
			void die() - called if the player hits the Koopa with a wrench, destroys the Koopa and puts a super mushroom in its place


	# Not super confident on how to go about implementing the magic items section, since it's so closely connected to the Abilities and Capabilities classes which are implemented by the game engine I'll look more into it, but should be fine leaving it unfinished for A1
	MagicItem: extends Ground
		Attributes:
		Methods:


	SuperMushroom: extends MagicItem
		Attributes:
		Methods:


	PowerStar: extends MagicItem
		Attributes:
		Methods:


	Toad: extends Actor (could implement Toad as a Singleton, since there will only ever be one toad?)
		Attributes:
		Methods: